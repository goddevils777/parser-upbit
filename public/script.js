class Dashboard {
    constructor() {
        this.ws = null;
        this.init();
    }

    init() {
        this.connectWebSocket();
        this.bindEvents();
    }

    connectWebSocket() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (ws –¥–ª—è http, wss –¥–ª—è https)
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = `${protocol}//${window.location.host}`;
        
        console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket:', wsUrl);
        this.ws = new WebSocket(wsUrl);
        
        this.ws.onopen = () => {
            console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
        };

        this.ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            
            if (data.type === 'log') {
                this.addLog(data.data);
            } else if (data.type === 'logs') {
                this.loadLogs(data.data);
            } else if (data.type === 'posts') {
                this.loadPosts(data.data);
            } else if (data.type === 'newPost') {
                this.addNewPost(data.data);
            }
        };

        this.ws.onclose = () => {
            console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
            setTimeout(() => this.connectWebSocket(), 3000);
        };

        this.ws.onerror = (error) => {
            console.error('üö® –û—à–∏–±–∫–∞ WebSocket:', error);
        };
    }

    bindEvents() {
        document.getElementById('startBtn').addEventListener('click', () => this.startParser());
        document.getElementById('stopBtn').addEventListener('click', () => this.stopParser());
        document.getElementById('testProxyBtn').addEventListener('click', () => this.testProxy());
    }

    // –î–æ–±–∞–≤—å –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    async stopParser() {
        const confirmed = await this.showConfirm(
            '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞', 
            '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞?'
        );
        
        if (!confirmed) return;
        
        try {
            const response = await fetch('/api/stop', { method: 'POST' });
            const result = await response.json();
            
            if (result.success) {
                this.showNotification(result.message, 'success');
            } else {
                this.showNotification(result.message, 'error');
            }
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä—Å–µ—Ä–∞', 'error');
        }
    }
    
async startParser() {
    const confirmed = await this.showConfirm(
        '–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞', 
        '–ó–∞–ø—É—Å—Ç–∏—Ç—å 25 –ø–æ—Ç–æ–∫–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Upbit? Gap ~120-240ms!'
    );
    
    if (!confirmed) return;
    
    const response = await fetch('/api/start', { method: 'POST' });
    const result = await response.json();
    
    if (result.success) {
        this.showNotification(result.message, 'success');
    } else {
        this.showNotification(result.message, 'error');
    }
}

async testProxy() {
    const btn = document.getElementById('testProxyBtn');
    btn.textContent = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...';
    btn.disabled = true;
    
    this.showNotification('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏...', 'info');
    
    try {
        const response = await fetch('/api/test-proxy', { method: 'POST' });
        const result = await response.json();
        
        if (result.success) {
            this.showNotification(`‚úÖ ${result.message}`, 'success');
        } else {
            this.showNotification(`‚ùå ${result.message}`, 'error');
        }
    } catch (error) {
        this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏', 'error');
    } finally {
        btn.textContent = '–¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏';
        btn.disabled = false;
    }
}

    addLog(logData) {
    const logsContainer = document.getElementById('logs');
    const logElement = document.createElement('div');
    logElement.className = 'log-item';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–æ–≥–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    if (logData.message.includes('‚úÖ')) {
        logElement.classList.add('log-success');
    } else if (logData.message.includes('‚ö†Ô∏è')) {
        logElement.classList.add('log-warning');
    } else if (logData.message.includes('‚ùå')) {
        logElement.classList.add('log-error');
    } else if (logData.message.includes('üö®')) {
        logElement.classList.add('log-info');
    }
    
    const time = new Date(logData.timestamp).toLocaleTimeString();
    logElement.textContent = `[${time}] ${logData.message}`;
    
    logsContainer.appendChild(logElement);
    logsContainer.scrollTop = logsContainer.scrollHeight;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –≤ DOM
    if (logsContainer.children.length > 50) {
        logsContainer.removeChild(logsContainer.firstChild);
    }
}

loadLogs(logs) {
    const logsContainer = document.getElementById('logs');
    logsContainer.innerHTML = '';
    logs.forEach(log => this.addLog(log));
}

loadPosts(posts) {
    const postsContainer = document.getElementById('posts');
    postsContainer.innerHTML = '';
    
    posts.forEach(post => {
        const postElement = document.createElement('div');
        postElement.className = 'post-item';
        postElement.innerHTML = `
            <div><strong>ID:</strong> ${post.id}</div>
            <div><strong>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</strong> ${post.title}</div>
            <div><strong>–î–∞—Ç–∞:</strong> ${post.date}</div>
            <div><strong>–û–±–Ω–∞—Ä—É–∂–µ–Ω:</strong> ${new Date(post.timestamp).toLocaleString()}</div>
        `;
        postsContainer.appendChild(postElement);
    });
}

addNewPost(postData) {
    const postsContainer = document.getElementById('posts');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ—Å—Ç —Å —Ç–∞–∫–∏–º ID
    const existingPosts = Array.from(postsContainer.children);
    const postExists = existingPosts.some(post => {
        const idElement = post.querySelector('div:first-child');
        return idElement && idElement.textContent.includes(postData.id);
    });
    
    // –ï—Å–ª–∏ –ø–æ—Å—Ç —É–∂–µ –µ—Å—Ç—å - –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
    if (postExists) {
        return;
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—Ä–µ–π—Å–∫–æ–µ –≤—Ä–µ–º—è –≤ –∫–∏–µ–≤—Å–∫–æ–µ
    const koreanDate = new Date(postData.date);
    const kievDate = koreanDate.toLocaleString('uk-UA', {
        timeZone: 'Europe/Kiev',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });
    
    // –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–æ–∂–µ –≤ –∫–∏–µ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const detectedDate = new Date(postData.detectedAt).toLocaleString('uk-UA', {
        timeZone: 'Europe/Kiev',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });
    
    const postElement = document.createElement('div');
    postElement.className = 'post-item';
    postElement.innerHTML = `
        <div><strong>ID:</strong> ${postData.id}</div>
        <div><strong>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</strong> ${postData.title}</div>
        <div><strong>–°–æ–∑–¥–∞–Ω (–ö–∏–µ–≤):</strong> ${kievDate}</div>
        <div><strong>–û–±–Ω–∞—Ä—É–∂–µ–Ω (–ö–∏–µ–≤):</strong> ${detectedDate}</div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
    postsContainer.insertBefore(postElement, postsContainer.firstChild);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ DOM
    if (postsContainer.children.length > 20) {
        postsContainer.removeChild(postsContainer.lastChild);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
showNotification(message, type = 'info') {
    const container = document.getElementById('notifications');
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    container.appendChild(notification);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    setTimeout(() => notification.classList.add('show'), 100);
    
    // –°–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => container.removeChild(notification), 300);
    }, 4000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
showConfirm(title, message) {
    return new Promise((resolve) => {
        const modal = document.getElementById('confirmModal');
        const modalTitle = document.getElementById('modalTitle');
        const modalMessage = document.getElementById('modalMessage');
        const confirmBtn = document.getElementById('modalConfirm');
        const cancelBtn = document.getElementById('modalCancel');
        
        modalTitle.textContent = title;
        modalMessage.textContent = message;
        modal.style.display = 'block';
        
        const handleConfirm = () => {
            modal.style.display = 'none';
            confirmBtn.removeEventListener('click', handleConfirm);
            cancelBtn.removeEventListener('click', handleCancel);
            resolve(true);
        };
        
        const handleCancel = () => {
            modal.style.display = 'none';
            confirmBtn.removeEventListener('click', handleConfirm);
            cancelBtn.removeEventListener('click', handleCancel);
            resolve(false);
        };
        
        confirmBtn.addEventListener('click', handleConfirm);
        cancelBtn.addEventListener('click', handleCancel);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) handleCancel();
        });
    });
}

}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    new Dashboard();
});