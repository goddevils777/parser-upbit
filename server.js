require('dotenv').config();
const fs = require('fs').promises;
const path = require('path');
const express = require('express');
const WebSocket = require('ws');
const UpbitWebScraper = require('./parser');
const axios = require('axios');
const { HttpsProxyAgent } = require('https-proxy-agent');

const app = express();
const server = require('http').createServer(app);
const wss = new WebSocket.Server({ server });

// Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID
const LAST_ID_FILE = path.join(__dirname, 'last_post_id.json');

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static('public'));
app.use(express.json());

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let logs = [];
let posts = [];
let scrapers = [];
let globalLastPostId = null;
let lastGlobalRequestTime = null;

// WebSocket –¥–ª—è live –ª–æ–≥–æ–≤
wss.on('connection', (ws) => {
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–≥–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    ws.send(JSON.stringify({ type: 'logs', data: logs }));
    ws.send(JSON.stringify({ type: 'posts', data: posts }));
});

async function loadLastPostId() {
    try {
        const data = await fs.readFile(LAST_ID_FILE, 'utf8');
        const parsed = JSON.parse(data);
        console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π ID –∏–∑ —Ñ–∞–π–ª–∞: ${parsed.lastPostId}`);
        return parsed.lastPostId;
    } catch (error) {
        console.log('üìÇ –§–∞–π–ª —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è');
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID
async function saveLastPostId(postId) {
    try {
        await fs.writeFile(LAST_ID_FILE, JSON.stringify({ 
            lastPostId: postId, 
            savedAt: new Date().toISOString() 
        }));
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π ID: ${postId}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID:', error.message);
    }
}


async function sendToTelegram(postData) {
    const sendStartTime = Date.now();
    
    try {
        const kievDate = new Date(postData.date).toLocaleString('uk-UA', {
            timeZone: 'Europe/Kiev',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        }) + `.${new Date(postData.date).getMilliseconds().toString().padStart(3, '0')}`;
        
        const detectedDate = new Date(postData.detectedAt).toLocaleString('uk-UA', {
            timeZone: 'Europe/Kiev',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        }) + `.${new Date(postData.detectedAt).getMilliseconds().toString().padStart(3, '0')}`;
        
        const now = new Date();
        const receivedTime = now.toLocaleString('uk-UA', {
            timeZone: 'Europe/Kiev',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        }) + `.${now.getMilliseconds().toString().padStart(3, '0')}`;
        
        const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        
        await axios.post(url, {
            chat_id: TELEGRAM_CHAT_ID,
            text: `üö® –ù–û–í–´–ô –ü–û–°–¢ UPBIT!

üìù ID: ${postData.id}
üéØ ${postData.title}
üìÖ –°–æ–∑–¥–∞–Ω: ${kievDate} (–ö–∏–µ–≤)
‚ö° –û–±–Ω–∞—Ä—É–∂–µ–Ω: ${detectedDate} (–ö–∏–µ–≤)
üì® –ü–æ–ª—É—á–µ–Ω–æ: ${receivedTime} (–ö–∏–µ–≤)
üîó https://upbit.com/service_center/notice`
        });
        
        const sendEndTime = Date.now();
        const deliveryTime = sendEndTime - sendStartTime;
        
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: ID ${postData.id} | –î–æ—Å—Ç–∞–≤–∫–∞: ${deliveryTime}ms`);
    } catch (error) {
        const sendEndTime = Date.now();
        const deliveryTime = sendEndTime - sendStartTime;
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ${error.message} | –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–Ω—è–ª–∞: ${deliveryTime}ms`);
    }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
function broadcastLog(message) {
    logs.push({ timestamp: new Date().toISOString(), message });
    if (logs.length > 100) logs.shift(); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤
    
    wss.clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify({ type: 'log', data: { timestamp: logs[logs.length-1].timestamp, message } }));
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
function broadcastNewPost(postData) {
    posts.unshift(postData); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
    if (posts.length > 50) posts.pop(); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 –ø–æ—Å—Ç–æ–≤
    
    wss.clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify({ type: 'newPost', data: postData }));
        }
    });
}


app.post('/api/start', async (req, res) => {
    if (scrapers.length > 0) {
        return res.json({ success: false, message: '–ü–∞—Ä—Å–µ—Ä—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã' });
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID –∏–∑ —Ñ–∞–π–ª–∞
    globalLastPostId = await loadLastPostId();
    console.log(`üîÑ –°—Ç–∞—Ä—Ç—É–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID: ${globalLastPostId || '–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫'}`);
    
    const proxyString = 'geo.iproyal.com:12321:qUajpQiN9232Dgco:Dhakfnsjfbsnfb_country-us';
    
    // –°–æ–∑–¥–∞–µ–º 25 –ø–æ—Ç–æ–∫–æ–≤
    for (let i = 1; i <= 25; i++) {
        const scraper = new UpbitWebScraper(proxyString, i);
        
        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ lastPostId
        const originalCheck = scraper.checkForNewPost.bind(scraper);
        scraper.checkForNewPost = (postData) => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π lastPostId
            scraper.lastPostId = globalLastPostId;
            
            const result = originalCheck(postData);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π ID –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç
            if (result && postData.id !== globalLastPostId) {
                const oldId = globalLastPostId;
                globalLastPostId = postData.id;
                
                console.log(`üÜï –ù–æ–≤—ã–π –ø–æ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ${oldId || 'null'} ‚Üí ${globalLastPostId}`);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                saveLastPostId(globalLastPostId);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ—Ç–æ–∫–∞–º
                scrapers.forEach(s => s.lastPostId = globalLastPostId);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                broadcastNewPost(result);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                sendToTelegram(result);
            }
            
            return result;
        };
        
        scrapers.push(scraper);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∫–∞–∂–¥—ã–µ 200ms (5—Å–µ–∫ / 25 = 200ms)
        setTimeout(() => {
            scraper.startParsing();
            console.log(`üßµ${i} –ü–æ—Ç–æ–∫ ${i} –∑–∞–ø—É—â–µ–Ω`);
        }, (i - 1) * 200);
    }
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º console.log
    const originalLog = console.log;
    console.log = (...args) => {
        const message = args.join(' ');
        originalLog(...args);
        broadcastLog(message);
    };
    
    res.json({ success: true, message: '25 –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ!' });
});

// –†–æ—É—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤
app.post('/api/stop', (req, res) => {
    if (scrapers.length === 0) {
        return res.json({ success: false, message: '–ü–∞—Ä—Å–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã' });
    }
    
    // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–∞—Ä—Å–µ—Ä–æ–≤ (–æ–Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    scrapers.length = 0;
    globalLastPostId = null;
    
    console.log('üõë –í—Å–µ –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    res.json({ success: true, message: '–í—Å–µ –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã' });
});

// –†–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
app.get('/api/status', (req, res) => {
    res.json({ 
        running: scrapers.length > 0,
        threadsCount: scrapers.length,
        lastPostId: globalLastPostId
    });
});

// –ó–∞–º–µ–Ω–∏ –Ω–∞:
const PORT = process.env.PORT || 3001;
console.log(`üîß –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É: ${PORT}`);

server.listen(PORT, '0.0.0.0', () => {
    console.log(`üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç ${PORT}`);
});