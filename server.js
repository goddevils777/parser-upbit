require('dotenv').config();
const fs = require('fs').promises;
const path = require('path');
const express = require('express');
const WebSocket = require('ws');
const UpbitWebScraper = require('./parser');
const axios = require('axios');
const { HttpsProxyAgent } = require('https-proxy-agent');

const app = express();
const server = require('http').createServer(app);
const wss = new WebSocket.Server({ server });

// Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID
const LAST_ID_FILE = path.join(__dirname, 'last_post_id.json');

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static('public'));
app.use(express.json());

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let logs = [];
let posts = [];
let scrapers = [];
let globalLastPostId = null;
let processedPostIds = new Set(); // –ö—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö ID
let lastProcessedTime = 0;

// WebSocket –¥–ª—è live –ª–æ–≥–æ–≤
wss.on('connection', (ws) => {
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–≥–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    ws.send(JSON.stringify({ type: 'logs', data: logs }));
    ws.send(JSON.stringify({ type: 'posts', data: posts }));
});

async function loadLastPostId() {
    try {
        const data = await fs.readFile(LAST_ID_FILE, 'utf8');
        const parsed = JSON.parse(data);
        console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π ID –∏–∑ —Ñ–∞–π–ª–∞: ${parsed.lastPostId}`);
        return parsed.lastPostId;
    } catch (error) {
        console.log('üìÇ –§–∞–π–ª —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è');
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID
async function saveLastPostId(postId) {
    try {
        await fs.writeFile(LAST_ID_FILE, JSON.stringify({ 
            lastPostId: postId, 
            savedAt: new Date().toISOString() 
        }));
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π ID: ${postId}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID:', error.message);
    }
}

async function sendToTelegram(postData) {
    const sendStartTime = Date.now();
    
    try {
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—Ä–µ–π—Å–∫–æ–µ –≤—Ä–µ–º—è –≤ –∫–∏–µ–≤—Å–∫–æ–µ
        const koreanDate = new Date(postData.date);
        const kievDate = koreanDate.toLocaleString('uk-UA', {
            timeZone: 'Europe/Kiev',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
        
        const detectedDate = new Date(postData.detectedAt).toLocaleString('uk-UA', {
            timeZone: 'Europe/Kiev',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
        
        const now = new Date();
        const receivedTime = now.toLocaleString('uk-UA', {
            timeZone: 'Europe/Kiev',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
        
        const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        
        await axios.post(url, {
            chat_id: TELEGRAM_CHAT_ID,
            text: `üö® –ù–û–í–´–ô –ü–û–°–¢ UPBIT!

üìù ID: ${postData.id}
üéØ ${postData.title}
üìÖ –°–æ–∑–¥–∞–Ω: ${kievDate} (–ö–∏–µ–≤)
‚ö° –û–±–Ω–∞—Ä—É–∂–µ–Ω: ${detectedDate} (–ö–∏–µ–≤)
üì® –ü–æ–ª—É—á–µ–Ω–æ: ${receivedTime} (–ö–∏–µ–≤)
üîó https://upbit.com/service_center/notice`
        });
        
        const sendEndTime = Date.now();
        const deliveryTime = sendEndTime - sendStartTime;
        
        console.log(`üì§ ‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ Telegram –∑–∞ ${deliveryTime}ms`);
    } catch (error) {
        const sendEndTime = Date.now();
        const deliveryTime = sendEndTime - sendStartTime;
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ${error.message} | –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–Ω—è–ª–∞: ${deliveryTime}ms`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
function broadcastLog(message) {
    logs.push({ timestamp: new Date().toISOString(), message });
    if (logs.length > 100) logs.shift(); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤
    
    wss.clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify({ type: 'log', data: { timestamp: logs[logs.length-1].timestamp, message } }));
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
function broadcastNewPost(postData) {
    posts.unshift(postData); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
    if (posts.length > 50) posts.pop(); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 –ø–æ—Å—Ç–æ–≤
    
    wss.clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify({ type: 'newPost', data: postData }));
        }
    });
}

app.post('/api/start', async (req, res) => {
    if (scrapers.length > 0) {
        return res.json({ success: false, message: '–ü–∞—Ä—Å–µ—Ä—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã' });
    }
    
    // –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ - –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è –∫–∞–∂–¥—ã–π —Ä–∞–∑
    globalLastPostId = null;
    console.log(`üîÑ –ó–∞–ø—É—Å–∫ —Å –Ω—É–ª—è - —Ñ–∞–π–ª –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è`);
    
    // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    processedPostIds.clear();
    
    const proxyString = 'geo.iproyal.com:12321:qUajpQiN9232Dgco:Dhakfnsjfbsnfb_country-us';
    
    // –§–ª–∞–≥ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞
    let firstPostReceived = false;
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
    let firstDetectionTime = null;
    
    // –°–æ–∑–¥–∞–µ–º 15 –ø–æ—Ç–æ–∫–æ–≤ (–±—ã–ª–æ 25, —Å–Ω–∏–∂–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É)
    for (let i = 1; i <= 15; i++) {
        const scraper = new UpbitWebScraper(proxyString, i);
        
        // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π ID - –Ω–∞—á–∏–Ω–∞–µ–º —Å null
        scraper.lastPostId = null;
        
        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const originalCheck = scraper.checkForNewPost.bind(scraper);
        scraper.checkForNewPost = async (postData) => {
            if (!postData) return false;
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –°–†–ê–ó–£ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp –∏–∑ –ª–æ–≥–æ–≤)
            const exactDetectionTime = new Date();
            const timestampForLog = exactDetectionTime.getTime();
            
            console.log(`‚è∞ ${scraper.threadId} checkForNewPost –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∞–Ω–æ: ${timestampForLog}`);
            
            // –ü–ï–†–í–´–ô –ø–æ—Å—Ç —Å –ª—é–±–æ–≥–æ –ø–æ—Ç–æ–∫–∞ - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            if (!firstPostReceived) {
                firstPostReceived = true;
                globalLastPostId = postData.id;
                
                console.log(`üöÄ –ü–ï–†–í–´–ô –ü–û–°–¢ ID ${postData.id} –æ—Ç –ø–æ—Ç–æ–∫–∞ ${scraper.threadId} - timestamp: ${timestampForLog}`);
                
                // –ú–û–ú–ï–ù–¢–ê–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º ID –≤—Å–µ–º –ø–æ—Ç–æ–∫–∞–º —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π
                scrapers.forEach(s => {
                    s.lastPostId = postData.id;
                });
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–¢–ñ–ï timestamp –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è 
                const displayTime = new Date(timestampForLog);
                
                // –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ë–ï–ó –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                const detectedKiev = displayTime.toLocaleString('uk-UA', {
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                }) + `.${displayTime.getMilliseconds().toString().padStart(3, '0')}`;
                
                console.log(`üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: timestamp=${timestampForLog}, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ=${detectedKiev}`);
                
                // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ –ö–∏–µ–≤–µ
                const postDate = new Date(postData.date);
                const createdKiev = postDate.toLocaleString('uk-UA', {
                    timeZone: 'Europe/Kiev',
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                }) + `.${postDate.getMilliseconds().toString().padStart(3, '0')}`;
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (gap)
                const detectionGap = displayTime.getTime() - postDate.getTime();
                const gapMinutes = Math.floor(detectionGap / 60000);
                const gapSeconds = Math.floor((detectionGap % 60000) / 1000);
                const gapMs = detectionGap % 1000;
                const gapText = `${gapMinutes}–º ${gapSeconds}—Å ${gapMs}–º—Å`;
                
                // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                const postForSending = {
                    timestamp: new Date().toISOString(),
                    id: postData.id,
                    title: postData.title,
                    date: postData.date,
                    detectedAt: displayTime.toISOString(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç–∂–µ timestamp
                    threadId: scraper.threadId
                };
                
                // –ö—Ä–∞—Å–∏–≤—ã–π –ª–æ–≥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                const detailedLog = `üöÄ –ü–ï–†–í–´–ô –ü–û–°–¢ –û–ë–ù–ê–†–£–ñ–ï–ù –ø–æ—Ç–æ–∫–æ–º ${scraper.threadId}:
**ID:** ${postData.id}
**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** ${postData.title}
**–°–æ–∑–¥–∞–Ω (–ö–∏–µ–≤):** ${createdKiev}
**–û–±–Ω–∞—Ä—É–∂–µ–Ω (–ö–∏–µ–≤):** ${detectedKiev}
‚è±Ô∏è **–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:** ${gapText}
üì§ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...`;
                
                console.log(detailedLog);
                
                // –ú–û–ú–ï–ù–¢–ê–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª)
                broadcastNewPost(postForSending);
                
                console.log(`‚úÖ –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç ID ${postData.id} –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã`);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –ê–°–ò–ù–•–†–û–ù–ù–û (–Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
                saveLastPostId(postData.id).catch(err => 
                    console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: ${err.message}`)
                );
                
                return postForSending;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–∏–π ID
            if (postData.id > globalLastPostId && !processedPostIds.has(postData.id)) {
                console.log(`üÜï –ù–æ–≤—ã–π –ø–æ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–æ–∫–æ–º ${scraper.threadId}: ID ${postData.id}`);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
                processedPostIds.add(postData.id);
                
                // –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ ID –∏–∑ –∫—ç—à–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)
                if (processedPostIds.size > 20) {
                    const sortedIds = Array.from(processedPostIds).sort((a, b) => b - a);
                    processedPostIds = new Set(sortedIds.slice(0, 20));
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π ID
                globalLastPostId = postData.id;
                
                // –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤ –ö–∏–µ–≤–µ
                const detectedTime = new Date();
                const detectedKiev = detectedTime.toLocaleString('uk-UA', {
                    timeZone: 'Europe/Kiev',
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                }) + `.${detectedTime.getMilliseconds().toString().padStart(3, '0')}`;
                
                // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ –ö–∏–µ–≤–µ
                const postDate = new Date(postData.date);
                const createdKiev = postDate.toLocaleString('uk-UA', {
                    timeZone: 'Europe/Kiev',
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                }) + `.${postDate.getMilliseconds().toString().padStart(3, '0')}`;
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (gap)
                const detectionGap = detectedTime.getTime() - postDate.getTime();
                const gapMinutes = Math.floor(detectionGap / 60000);
                const gapSeconds = Math.floor((detectionGap % 60000) / 1000);
                const gapMs = detectionGap % 1000;
                const gapText = `${gapMinutes}–º ${gapSeconds}—Å ${gapMs}–º—Å`;
                
                // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                const postForSending = {
                    timestamp: new Date().toISOString(),
                    id: postData.id,
                    title: postData.title,
                    date: postData.date,
                    detectedAt: detectedTime.toISOString(),
                    threadId: scraper.threadId
                };
                
                // –ö—Ä–∞—Å–∏–≤—ã–π –ª–æ–≥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                const detailedLog = `**ID:** ${postData.id}
**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** ${postData.title}
**–°–æ–∑–¥–∞–Ω (–ö–∏–µ–≤):** ${createdKiev}
**–û–±–Ω–∞—Ä—É–∂–µ–Ω (–ö–∏–µ–≤):** ${detectedKiev}
‚è±Ô∏è **–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:** ${gapText}
üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ Telegram...`;
                
                console.log(detailedLog);
                
                // –ú–û–ú–ï–ù–¢–ê–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                broadcastNewPost(postForSending);
                
                console.log(`‚úÖ –ü–æ—Å—Ç ID ${postData.id} –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å`);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –ê–°–ò–ù–•–†–û–ù–ù–û
                Promise.all([
                    saveLastPostId(postData.id),
                    sendToTelegram(postForSending)
                ]).then(() => {
                    console.log(`üì§ ‚úÖ –ü–æ—Å—Ç ID ${postData.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª`);
                }).catch(err => {
                    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ: ${err.message}`);
                });
                
                return postForSending;
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
            return originalCheck(postData);
        };
                
        scrapers.push(scraper);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∫–∞–∂–¥—ã–µ 300ms (15 –ø–æ—Ç–æ–∫–æ–≤ * 300ms = 4.5 —Å–µ–∫)
        setTimeout(() => {
            scraper.startParsing();
            console.log(`üßµ${i} –ü–æ—Ç–æ–∫ ${i} –∑–∞–ø—É—â–µ–Ω`);
        }, (i - 1) * 300);
    }
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º console.log –¥–ª—è live –ª–æ–≥–æ–≤
    const originalLog = console.log;
    console.log = (...args) => {
        const message = args.join(' ');
        originalLog(...args);
        broadcastLog(message);
    };
    
    res.json({ success: true, message: '15 –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ! –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏.' });
});

// –†–æ—É—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤
app.post('/api/stop', (req, res) => {
    if (scrapers.length === 0) {
        return res.json({ success: false, message: '–ü–∞—Ä—Å–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã' });
    }
    
    // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–∞—Ä—Å–µ—Ä–æ–≤ (–æ–Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    scrapers.length = 0;
    globalLastPostId = null;
    processedPostIds.clear(); // –û—á–∏—â–∞–µ–º –∫—ç—à
    
    console.log('üõë –í—Å–µ –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    res.json({ success: true, message: '–í—Å–µ –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã' });
});

// –†–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
app.get('/api/status', (req, res) => {
    res.json({ 
        running: scrapers.length > 0,
        threadsCount: scrapers.length,
        lastPostId: globalLastPostId
    });
});

// –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
app.get('/api/test-direct', async (req, res) => {
    const startTime = Date.now();
    console.log(`üß™ –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${startTime}`);
    
    try {
        const response = await axios.get('https://api-manager.upbit.com/api/v1/announcements?os=web&page=1&per_page=1&category=all');
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        const latestPost = response.data?.data?.notices?.[0];
        
        console.log(`‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${endTime} | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}ms`);
        
        res.json({
            success: true,
            duration: duration,
            latestPost: latestPost ? {
                id: latestPost.id,
                title: latestPost.title,
                created: latestPost.listed_at
            } : null
        });
    } catch (error) {
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        res.json({
            success: false,
            duration: duration,
            error: error.message
        });
    }
});

const PORT = process.env.PORT || 3001;
console.log(`üîß –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É: ${PORT}`);

server.listen(PORT, '0.0.0.0', () => {
    console.log(`üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç ${PORT}`);
});