const axios = require('axios');
const { HttpsProxyAgent } = require('https-proxy-agent');
const cheerio = require('cheerio');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
let globalLastTime = null;
let globalLastRequestTime = null; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –õ–Æ–ë–û–ì–û –ø–æ—Ç–æ–∫–∞

class UpbitWebScraper {
    constructor(proxyString, threadId = 1) {
        this.proxyString = proxyString;
        this.threadId = threadId;
        this.apiUrl = 'https://api-manager.upbit.com/api/v1/announcements?os=web&page=1&per_page=1&category=all';
        this.lastPostId = null;
        this.lastRequestTime = null;
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
        this.threadConfigs = {
            1: { userAgent: 'Chrome/120.0.0.0', language: 'ko-KR,ko;q=0.9,en;q=0.1' },
            2: { userAgent: 'Chrome/119.0.0.0', language: 'ko-KR,ko;q=0.8,en-US;q=0.2' },
            3: { userAgent: 'Chrome/121.0.0.0', language: 'ko;q=0.9,ko-KR;q=0.8' },
            4: { userAgent: 'Chrome/118.0.0.0', language: 'ko-KR;q=0.9,ko;q=0.7' },
            5: { userAgent: 'Chrome/122.0.0.0', language: 'ko-KR,ko;q=0.8' },
            6: { userAgent: 'Chrome/117.0.0.0', language: 'ko;q=0.8,ko-KR;q=0.7' },
            7: { userAgent: 'Chrome/123.0.0.0', language: 'ko-KR,ko;q=0.9' },
            8: { userAgent: 'Chrome/116.0.0.0', language: 'ko;q=0.9,en;q=0.1' },
            9: { userAgent: 'Chrome/124.0.0.0', language: 'ko-KR;q=0.8,ko;q=0.7' },
            10: { userAgent: 'Chrome/115.0.0.0', language: 'ko-KR,ko;q=0.7,en;q=0.2' },
            11: { userAgent: 'Chrome/125.0.0.0', language: 'ko;q=0.8,ko-KR;q=0.9' },
            12: { userAgent: 'Chrome/114.0.0.0', language: 'ko-KR;q=0.7,ko;q=0.8' },
            13: { userAgent: 'Chrome/126.0.0.0', language: 'ko;q=0.7,ko-KR;q=0.8' },
            14: { userAgent: 'Chrome/113.0.0.0', language: 'ko-KR,ko;q=0.6,en;q=0.1' },
            15: { userAgent: 'Chrome/127.0.0.0', language: 'ko;q=0.6,ko-KR;q=0.7' },
            16: { userAgent: 'Chrome/128.0.0.0', language: 'ko-KR,ko;q=0.5,en;q=0.2' },
            17: { userAgent: 'Chrome/112.0.0.0', language: 'ko;q=0.5,ko-KR;q=0.6' },
            18: { userAgent: 'Chrome/129.0.0.0', language: 'ko-KR;q=0.6,ko;q=0.5' },
            19: { userAgent: 'Chrome/111.0.0.0', language: 'ko;q=0.4,ko-KR;q=0.5,en;q=0.1' },
            20: { userAgent: 'Chrome/130.0.0.0', language: 'ko-KR,ko;q=0.4' },
            21: { userAgent: 'Chrome/110.0.0.0', language: 'ko;q=0.3,ko-KR;q=0.4' },
            22: { userAgent: 'Chrome/131.0.0.0', language: 'ko-KR;q=0.5,ko;q=0.3' },
            23: { userAgent: 'Chrome/109.0.0.0', language: 'ko;q=0.6,ko-KR;q=0.4' },
            24: { userAgent: 'Chrome/132.0.0.0', language: 'ko-KR,ko;q=0.2,en;q=0.1' },
            25: { userAgent: 'Chrome/108.0.0.0', language: 'ko;q=0.2,ko-KR;q=0.3' }
        };
        
        this.config = this.threadConfigs[threadId] || this.threadConfigs[1];
    }

    parseProxy() {
        const [host, port, username, password] = this.proxyString.split(':');
        return { host, port, username, password };
    }

    createHttpClient() {
        const { host, port, username, password } = this.parseProxy();
        const proxyUrl = `http://${username}:${password}@${host}:${port}`;
        const agent = new HttpsProxyAgent(proxyUrl);
        
        return axios.create({
            httpsAgent: agent,
            timeout: 4000,
            headers: {
                'User-Agent': `Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) ${this.config.userAgent} Safari/537.36`,
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language': this.config.language,
                'Accept-Encoding': 'gzip, deflate, br',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1'
            }
        });
    }

    async fetchPage() {
        const client = this.createHttpClient();
        const startTime = Date.now();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å
        const startTimeStr = new Date(startTime).toLocaleTimeString('uk-UA', {
            timeZone: 'Europe/Kiev',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        }) + `.${startTime % 1000}`;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º gap —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –õ–Æ–ë–û–ì–û –ø–æ—Ç–æ–∫–∞
        let globalGapText = '';
        if (globalLastRequestTime) {
            const globalGapMs = startTime - globalLastRequestTime;
            globalGapText = ` | üåê${globalGapMs}ms`;
        } else {
            globalGapText = ' | üåêFirst';
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º gap —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –≠–¢–û–ì–û –ø–æ—Ç–æ–∫–∞
        let threadGapText = '';
        if (this.lastRequestTime) {
            const threadGapMs = startTime - this.lastRequestTime;
            threadGapText = ` | ‚ö°${threadGapMs}ms`;
        } else {
            threadGapText = ' | ‚ö°First';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        globalLastRequestTime = startTime;
        
        try {
            const response = await client.get(this.apiUrl);
            const endTime = Date.now();
            const requestDuration = endTime - startTime;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            this.lastRequestTime = endTime;
            
            const notices = response.data?.data?.notices || [];
            console.log(`‚úÖ ${this.threadId} [${startTimeStr}] –û—Ç–≤–µ—Ç –∑–∞ ${requestDuration}ms | –ù–æ–≤–æ—Å—Ç–µ–π: ${notices.length}${globalGapText}${threadGapText}`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
            this.lastFetchStartTime = startTime;
            
            return notices;
        } catch (error) {
            const endTime = Date.now();
            const requestDuration = endTime - startTime;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.lastRequestTime = endTime;
            
            if (error.response?.status === 429) {
                console.log(`‚ùå ${this.threadId} [${startTimeStr}] 429 Rate limit –∑–∞ ${requestDuration}ms${globalGapText}`);
            } else if (error.response?.status === 403) {
                console.log(`‚ùå ${this.threadId} [${startTimeStr}] 403 CloudFlare –±–ª–æ–∫ –∑–∞ ${requestDuration}ms${globalGapText}`);
            } else {
                console.log(`‚ùå ${this.threadId} [${startTimeStr}] –û—à–∏–±–∫–∞ –∑–∞ ${requestDuration}ms: ${error.message}${globalGapText}`);
            }
            return null;
        }
    }

    parseLatestNews(notices) {
        const parseStartTime = Date.now();
        console.log(`‚è∞ ${this.threadId} parseLatestNews –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏: ${parseStartTime}`);
        
        if (!notices || !Array.isArray(notices) || notices.length === 0) {
            console.log(`‚ö†Ô∏è ${this.threadId} –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –≤ API`);
            return null;
        }
        
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å (—Å–∞–º–∞—è —Å–≤–µ–∂–∞—è)
        const latestPost = notices[0];
        
        const postData = {
            id: latestPost.id,
            title: latestPost.title,
            date: latestPost.listed_at || latestPost.first_listed_at,
            pinned: latestPost.pinned || false
        };
        
        // –ü—Ä–æ—Å—Ç–æ–π –ª–æ–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        const shortTitle = postData.title.substring(0, 40) + '...';
        console.log(`üìç ${this.threadId} ID ${postData.id} | ${shortTitle}`);
        
        const parseEndTime = Date.now();
        console.log(`‚è∞ ${this.threadId} parseLatestNews –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ${parseEndTime} (${parseEndTime - parseStartTime}ms)`);
        
        return postData;
    }

    checkForNewPost(postData) {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ü–û–õ–ù–û–°–¢–¨–Æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ server.js
        // –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ server.js
        if (!postData) {
            return false;
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        const detectionTime = this.lastFetchStartTime || Date.now();
        
        const postForWeb = {
            timestamp: new Date().toISOString(),
            id: postData.id,
            title: postData.title,
            date: postData.date,
            detectedAt: new Date(detectionTime).toISOString(),
            threadId: this.threadId
        };
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if (this.lastPostId === null) {
            this.lastPostId = postData.id;
            return postForWeb;
        }
        
        if (postData.id !== this.lastPostId) {
            this.lastPostId = postData.id;
            return postForWeb;
        }
        
        return false;
    }

    async startParsing() {
        console.log(`üßµ${this.threadId} –ü–æ—Ç–æ–∫ ${this.threadId} –∑–∞–ø—É—â–µ–Ω`);
        
        // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        const fixedInterval = 1000 + (this.threadId - 1) * 100; // 1.0—Å, 1.1—Å, 1.2—Å... 2.4—Å
        console.log(`üßµ${this.threadId} –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—Ä–æ—Å–æ–≤: ${fixedInterval}ms`);
        
        const parseLoop = async () => {
            const loopStartTime = Date.now();
            console.log(`‚è∞ ${this.threadId} parseLoop –Ω–∞—á–∞–ª—Å—è: ${loopStartTime}`);
            
            const apiData = await this.fetchPage();
            const fetchEndTime = Date.now();
            console.log(`‚è∞ ${this.threadId} fetchPage –∑–∞–≤–µ—Ä—à–µ–Ω: ${fetchEndTime} (${fetchEndTime - loopStartTime}ms)`);
            
            if (apiData) {
                const parseStartTime = Date.now();
                console.log(`‚è∞ ${this.threadId} parseLatestNews –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è: ${parseStartTime}`);
                
                const postData = this.parseLatestNews(apiData);
                const parseEndTime = Date.now();
                console.log(`‚è∞ ${this.threadId} parseLatestNews –∑–∞–≤–µ—Ä—à–µ–Ω: ${parseEndTime} (${parseEndTime - parseStartTime}ms)`);
                
                if (postData) {
                    const checkStartTime = Date.now();
                    console.log(`‚è∞ ${this.threadId} checkForNewPost –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è: ${checkStartTime}`);
                    
                    this.checkForNewPost(postData);
                    
                    const checkEndTime = Date.now();
                    console.log(`‚è∞ ${this.threadId} checkForNewPost –∑–∞–≤–µ—Ä—à–µ–Ω: ${checkEndTime} (${checkEndTime - checkStartTime}ms)`);
                }
            }
            
            const totalTime = Date.now() - loopStartTime;
            console.log(`‚è∞ ${this.threadId} parseLoop –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: ${totalTime}ms`);
            
            // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –±–µ–∑ —Ä–∞–Ω–¥–æ–º–∞
            setTimeout(parseLoop, fixedInterval);
        };
        
        parseLoop();
    }
}

module.exports = UpbitWebScraper;